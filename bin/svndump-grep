#! /usr/bin/perl

use strict;
use warnings;

use lib "$ENV{HOME}/cpan-pfx"; # XXX: where I keep my CPAN-installed modules

use SVN::Dump; # on CPAN
use CGI 'escapeHTML';


=head1 NAME

svndump-grep - find strings in svn dump file

=head1 SYNOPSIS

 # Make svndump file
 ssh intcvs1 'svnadmin dump /repos/svn/badger | gzip -1' > /var/tmp/svndump.badger.rNNNNN.gz

 # Search it
 zcat /var/tmp/svndump.badger.rNNNNN.gz | svndump-grep - 'my quer(y|ies)' > ~/tmp/search.html

 ssh fastbox 'zcat | svndump-grep - "regexp?"' < /var/tmp/svndump.badger.rNNNNN.gz > ~/tmp/search.html

=head1 DESCRIPTION

This script accepts an C<svndump> file and a Perl5 regexp, and outputs
an HTML file containing pattern matches with hyperlinks back to
ViewVC.

=head2 Sizes and times

For our 820 MiB repository (in FSFS format), the dumpfile is ~ 1.3 GiB
and gzips down to 320 MiB.  Unzip and search then takes ~ 2.5 minutes
on a 2.8 GHz dual core Pentium 4 machine.

=head2 Assumptions

The URLs inserted in the HTML correspond to the ViewVC interface for
our main repository.

=head1 CAVEATS

This script was an experiment which worked well enough to be
abandoned.

Debug & local stuff is marked with XXX in the source.

This is B<not safe for putting behind a web interface> unless you do
something to sanitise the incoming regexps to remove complexity
attacks and embedded code.

=head2 Missing features

Auto-decompression of .gz files.

Restrict or specialise search by filetype.

Looking inside binary objects, if you allow these in your repo.

Make it into a module + calling stub script, to extract the URL
generation and make it safe for use from the web.

=cut

die "Syntax: $0 <svndump-file> <regexp>  > result.html"
  unless 2 == @ARGV && ($ARGV[0] eq '-' || -f $ARGV[0]);

my $dump = SVN::Dump->new({ file => shift });

# DNW: print $dump->as_string(); # only print the dump header

my $PAT = qr/$ARGV[0]/;

my %current_rev = (rev => "?");
my %hits; # key = path, value = [ [ revnum, author, type, start:end ], ... ]

while(my $rec = $dump->next_record()) {
    record($rec);
}

matches_show();


sub record {
    my $rec = shift;

    my $type = $rec->type;
    if ($type eq 'revision') {
	%current_rev = (rev    => $rec->get_header('Revision-number'),
			author => $rec->get_property('svn:author'),
			date   => $rec->get_property('svn:date'));
#print "REV $current_rev{rev}\n";
	my $log = $rec->get_property('svn:log');
	match_find(log => \$log) if defined $log;
    } elsif ($type eq 'node') {
	my $path = $rec->get_header('Node-path');
	my ($kind, $action) = ($rec->get_header('Node-kind'),
			       $rec->get_header('Node-action'));
	die "Cannot understand --deltas" if $rec->get_header('Text-delta'); # only present with value 'true'?
#	print "P=$path, K=$kind, A=$action\n";
	$path =~ s{/*$}{/} if defined $kind && $kind eq 'dir'; # bodge for visible directoryness
	local $current_rev{path} = $path;
	match_find(path => \$path) if defined $path;
	my $txt = $rec->get_text();
	match_find(text => \$txt) if defined $txt;
    } elsif ($type eq 'format' || $type eq 'uuid') {
	# ignore
    } else {
	warn "Unknown SVN::Dump type '$type'";
    }

    recurse_record($rec->get_included_record) if $rec->get_included_record;
}

sub match_find {
    my ($type, $txtref) = @_;
    if ($$txtref =~ $PAT) {
	# could figure out line & column
#	my $hit = [ $current_rev{rev}, $current_rev{author}, $type, $txtref, $-[0], $+[0] ];
#	print "$current_rev{rev}\t$current_rev{author}\t$type\t$-[0]:$+[0]\n";
	my $path = $current_rev{path} || "";
	my $hits = $hits{$path} ||= [];
	push @$hits, [ $current_rev{rev}, $current_rev{author}, $type, "$-[0]:$+[0]" ];
    }
}

sub matches_show {
    my $hPAT = escapeHTML($PAT);
    print <<"HDR";
<html>
  <head>
    <title>Search hits</title>
    <style type="text/css">
ul.hits { font-size: 110% }
ul.revs { font-size:  70% }
ul.revs li	{ display: inline; border: 1px grey solid; border-top: 0; border-bottom: 0 }
ul.revs li a	{ padding: 0 2ex; line-height: 1.5; white-space: pre }
    </style>
  </head>
  <body>
    <h1>Search hits for '$hPAT'</h1>
      <UL class="hits">
HDR
    foreach my $path (sort keys %hits) {
	if ($path eq '') {
	    # It's a commit-log hit; we only have the revision number
	    print "<li>(log comment)\n";
	} else {
	    print "<li><tt>", escapeHTML($path), "</tt>\n";
	}
	print " <ul class='revs'>\n";
	foreach my $rev (@{ $hits{$path} }) {
	    my ($rev, $author, $type, $char_range) = @$rev;
	    my $url   = mkurl($rev, $path);
	    my $hurl  = escapeHTML($url);
	    my $descr = escapeHTML("$rev ($author)");
	    print qq{  <li><a href="$hurl">$descr</a></li>\n};
	}
	print " </ul></li>\n";
    }
    print "</UL></body></html>\n";
}

sub mkurl {
    my ($rev, $path) = @_;

    my $base = "http://intweb/cgi-bin/prodsoft/badger-svn?find="; # XXX: local knowledge
    if ($path eq "") {
	# The commit
	return "$base$rev";
    } else {
	# The path in a commit
	my $find = escapeCGI("/$path\@$rev");
	return "$base$find";
    }
}

sub escapeCGI {
    my $frag = shift;
    $frag =~ s{([^-0-9a-zA-Z_/.@])}{sprintf("%%%02X", ord($1))}eg;
    return $frag;
}


sub recurse_record {
    my $r = shift;
    # Recursive records are made by cvs2svn (at branch points), and
    # other times for "copy with diff".  Sometimes they have text.
    local $current_rev{rev} = "$current_rev{rev}+recursive"; # XXX: this is debug stuff, it breaks the output hyperlink (because not a number) - I wanted to see what recursive records actually do (and haven't looked at the docs enough to find out)
    record($r);
}



sub debug_record {
    my $r = shift;
    h($r->get_headers_block)  if $r->get_headers_block;
    p($r->get_property_block) if $r->get_property_block;
    t($r->get_text_block)     if $r->get_text_block;
    r($r->get_included_record) if $r->get_included_record;
}

sub show_h {
    my $h = shift;
    local $" = ", ";
    my @k;
    foreach my $k ($h->keys) { push @k, "$k=".$h->get($k) }
    print "H: $h\t@k\n";
}

sub show_p {
    my $p = shift;
    local $" = ", ";
    my @k = $p->keys;
    print "P: $p\t@k\n";
}

sub show_t {
    my $t = shift;
    print "T: $t\n";
}

sub show_r {
    my $r = shift;
    print "R: $r\n";
}
