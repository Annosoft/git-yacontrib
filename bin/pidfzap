#! /usr/bin/perl

use strict;
use warnings;


=head1 NAME

pidfzap - PID-file lister, checker and zapper


=head1 SYNOPSIS

 pidfzap /var/run/stuff/ /var/run/other/


=head1 DESCRIPTION

Recurse the specified director(y|ies), find files named qr{\.pid$} and
do things to them.

Currently, lists the files and checks their status.

Later there will be switches for verbosity, cleaning stale pidfiles,
killing running processes etc..


=head1 CAVEATS

There may be other tools that can do this.

Assumes the pidfiles found are for this machine.

On networked filesystems, the filesystem type is not checked (to warn
the user) and there is no way to pick up a hostname wired into the
file path.


=head1 AUTHOR

 Copyright (c) 2009 Genome Research Ltd.
 Author: Matthew Astley <mca@sanger.ac.uk>

=cut


use File::Find;
use Getopt::Long;

my %opt = (verbose => 1,
	   check => 1,
	   clean => 0,
	   kill => undef);

my %pidf; # key = state, value = \@pidf_objects
my $PIDFILE_RE = qr{\.pid$|/pid-file$};

sub main {
    File::PidFile->__ps_sanity; # OK on Linux; other OSes will need more code

    local $SIG{__WARN__} = sub { warn "Warning: @_" }; # decorate the warnings from find

    find({ wanted => \&wanted,
	   follow => 1, # follow symlinks; does cycle checking
	   dangling_symlinks => "(warn)", # true non-CODEref
	   no_chdir => 1, # don't need it
	 }, @ARGV);

    display();
}

sub wanted {
    my ($dir, $path) =
      ($File::Find::dir, $File::Find::name); # do not modify these or $_
    local $_; # protect against callees' changes

    return unless -f _;
    return unless $path =~ $PIDFILE_RE;
    my @lstat = lstat(_);

    my $pidf = File::PidFile->new(path => $path, uid => $lstat[4]);
    my $state = eval { $pidf->state } || "error";
    warn "$@" if $@;
    push @{ $pidf{$state} }, $pidf;
}

sub display {
    while (my ($state, $L) = each %pidf) {
	next if $state eq 'ok' && !$opt{verbose};
	my @pidf = @$L;
	print join "\n  ", $state, map { $_->path } @pidf;
	print "\n";
    }
}

main();


package File::PidFile;

use strict;
use warnings;
use Carp;

sub new {
    my ($proto, @arg) = @_;
    my $self = bless {}, ref($proto) || $proto;
    @arg = $self->_init(@arg);
    die "Unknown args (@arg) remain after _init" if @arg;
    return $self;
}

sub _init {
    my ($self, %arg) = @_;
    foreach my $prop (qw( path uid )) {
	$$self{$prop} = delete $arg{$prop};
	croak "Missing property $prop" unless defined $$self{$prop};
    }
    return %arg;
}

sub path { $_[0]->{path} }
sub uid  { $_[0]->{uid} }

sub user {
    my ($self) = @_;
    return (getpwuid($self->uid))[0];
}


=head2 pid()

Object method.  Open the file and read the PID.

Returns the pid number, or undef if the file no longer exists.  Other
problems, including strange file contents, raise an error.

=cut

sub pid {
    my ($self) = @_;
    my $fn = $self->path;
    if (open my $fh, "<", $fn) {
	# Opened OK
	croak "File $fn: too long to be a pidfile" if 100 < -s $fh;
	my $txt = do { local $/; <$fh> }; # slurp all
	my $len = length($txt);
	$txt =~ s/[\n\r]*\z//;
	croak "File $fn: contents ($len bytes) are not a pid"
	  unless $txt =~ m{^([0-9]{1,12})$}; # don't assume the 16 bit limit will persist
	return $1; # untainted
    } else {
	# Error opening file
	return undef if $!{ENOENT};
	croak "File $fn: read failed, $!";
    }
}


=head2 state()

Object method.  Return string representing current state of pidfile.

The data is not cached, so will involve file reading per call.  The
output is a string rather than a symbol.

=cut

sub state {
    my ($self) = @_;

    my $pid = $self->pid;
    my $f_uid = $self->uid;
    my $p_uid = __ps_uid($pid);

    return "gone" if !defined $p_uid;
    return "different(pidf owner $f_uid, proc owner $p_uid)" if $f_uid != $p_uid;
    return "ok";
}


# Return process UID (real or effective?), or undef if pid is dead
sub __ps_uid {
    my ($pid) = @_;
    my $procfn = "/proc/$pid/";
    my @stat = stat $procfn;
    if (-d $procfn) {
	return $stat[4];
    } else {
	return undef;
    }
}

{
    my $checked;
    sub __ps_sanity {
	$checked ||= __ps_uid($$);
	confess "Cannot get process UID under this OS?"
	  unless $< == $checked;
    }
}

1;
