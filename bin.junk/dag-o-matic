#! /usr/bin/perl

use strict;
use warnings;


sub main {
    die "Syntax: $0 <input.csv>\n" unless 1 == @ARGV && -f $ARGV[0];
    my $fn = shift @ARGV;

    my $data = read_csv($fn);
    remove_blank_lines($data);
    fill_down($data, 0, 1, 2);

#    dump_csvoid($data, "models-fd.csv");

    my @node; # order of declaration
    my %node; # key = node, value = { join => \@join, key => $value }

    foreach my $row (@$data) {
	my ($cluster, $name, $rel, $to) = @$row;

	push @node, $name unless exists $node{$name};
	my $N = $node{$name} ||= {};

	if (!defined $rel || $rel eq '') {
	    # Just a loose node; work already done
	} elsif (!defined $to || $to eq '') {
	    # Some property of a node
	    warn "Replaced label on $name for $rel" if $$N{label};
	    $$N{label} = "$name\\n($rel)";
	} else {
	    # Nodes joined by labelled edge
	    my $j;
	    my %arrow_type = ("is a" => "empty", "include Module" => "emptyempty");
	    if ($rel eq 'belongs to') {
		# we have FK to that
		$j = { to => $to, color => "green",
		       arrowtail => "crowtee", arrowhead => "none" };
	    } elsif ($rel eq 'has many') {
		# they FK to us
		$j = { to => $to, color => "blue", arrowhead => "crowtee" };
	    } elsif ($arrow_type{$rel}) {
		$j = { to => $to, color => "purple", arrowhead => $arrow_type{$rel} };
	    } else {
		# generic line
		$j = [ $to, $rel ];
	    }
		push @{ $$N{join} }, $j;
	}
    }

    print dot_head();
    foreach my $N (@node) {
	my $prop = $node{$N};
	my @join = @{ $$prop{join} || [] };

	my @nodeprop = hash2props($prop, qw( label shape ));
	if (@nodeprop) {
	    local $" = ", ";
	    print qq{  "$N"\t[ @nodeprop ]\n};
	} else {
	    # Ensure present, if no other mentions made
	    print qq{  "$N"\n} if !@join;
	}

	foreach my $J (@join) {
	    if (ref($J) eq 'ARRAY') {
		my ($to, $lbl) = @$J;
		print qq{  "$N" -> "$to"\t[ label="$lbl" ]\n};
	    } elsif (ref($J) eq 'HASH') {
		my $to = delete $$J{to};
		my @joinprop = hash2props($J, keys %$J);
		print qq{  "$N" -> "$to"\t[ @joinprop ]\n};
	    } elsif (!ref($J)) {
		print qq{  "$N" -> "$J"\n};
	    } else {
		die "Can't read join spec $J in $N";
	    }
	}
    }
    print dot_foot();
}

# OK, so Node & Edge oughta be objects....  but this is supposed to be
# a quick hack
sub hash2props {
    my ($hash, @prop) = @_;

    my @nodeprop;
    foreach my $key (@prop) {
	push @nodeprop, qq{$key="$$hash{$key}"} if $$hash{$key};
    }

    return wantarray ? @nodeprop : (join ", ", @nodeprop);
}


sub read_csv {
    my ($fn) = @_;
    open my $fh, "<", $fn or die "$fn: $!";

    # Crude CSV reader
    my @out;
    while (<$fh>) {
	chomp;
	my @col = split /,/;
	foreach (@col) { s{^"(.*)"$}{$1} }
	push @out, \@col;
    }
    return \@out;
}

sub dump_csvoid {
    my ($data, $fn) = @_;
    open my $csv, ">", $fn or die "dump to $fn: $!";

    # Horrible CSV writer
    foreach my $row (@$data) {
	print $csv join ",", map {qq{"$_"}} @$row;
	print $csv "\n";
    }
}

sub remove_blank_lines {
    my ($data) = @_;
    for (my $i=0; $i < @$data; $i++) {
	next if @{ $$data[$i] };
	# remove empty row
	splice @$data, $i, 1;
	$i --;
    }
    return ();
}

sub fill_down {
    my ($data, @colidx) = @_;

    my @last;
    for (my $y=0; $y < @$data; $y++) {
	my $row = $data->[$y];
	foreach my $x (@colidx) {
	    my $cell = $row->[$x];
	    if (!defined $cell || $cell eq '') {
		$cell = $row->[$x] = $last[$x] if defined $last[$x];
	    } else {
		$last[$x] = $cell;
		$#last = $x; # clear fill-downs happening on our right
	    }
	}
    }

    return ();
}


sub dot_head {
    <<'HEAD';
digraph M {
  label = "Models found in Sequencescape - vague checklist -- mca 2010-03-10"
  pencolor=grey

  node [ shape=record ]

  /* Pagination runes */
  page="8.26,11.69"
  margin=0.2
  size="7.85,11.28"
  ratio=compress

HEAD
}

sub dot_foot {
    <<'FOOT';

}
FOOT
}

main();
